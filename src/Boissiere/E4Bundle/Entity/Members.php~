<?php

namespace Boissiere\E4Bundle\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;

/**
 * Members
 *
 * @ORM\Table(name="members")
 * @ORM\Entity(repositoryClass="Boissiere\E4Bundle\Entity\MembersRepository")
 */
class Members
{
    /**
     * @var integer
     *
     * @ORM\Column(name="idMember", type="integer", nullable=false)
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="IDENTITY")
     */
    private $idmember;

    /**
     * @var string
     *
     * @ORM\Column(name="nameMember", type="string", length=255, nullable=false)
     */
    private $namemember;

    /**
     * @var string
     *
     * @ORM\Column(name="instrument", type="string", length=255, nullable=false)
     */
    private $instrument;

    /**
     * @var string
     *
     * @ORM\Column(name="description", type="text", length=65535, nullable=false)
     */
    private $description;

    /**
     * @var string
     *
     * @ORM\Column(name="picture", type="string", length=255, nullable=false)
     */
    private $picture;

    /**
     * @Assert\File(maxSize="5000k")
     */
    public $file;

    public function getWebPath()
    {
        return null === $this->picture ? null : $this->getUploadDir().'/'.$this->picture;
    }

    protected function getUploadRootDir()
    {
        // le chemin absolu du répertoire dans lequel sauvegarder les photos de profil
        return __DIR__.'/../../../../web/'.$this->getUploadDir();
    }

    protected function getUploadDir()
    {
        // get rid of the __DIR__ so it doesn't screw when displaying uploaded doc/image in the view.
        return 'bundles/boissieree4/upload/memberPicture';
    }

    public function uploadProfilePicture()
    {
        // Nous utilisons le nom de fichier original, donc il est dans la pratique
        // nécessaire de le nettoyer pour éviter les problèmes de sécurité

        // move copie le fichier présent chez le client dans le répertoire indiqué.
        $this->file->move($this->getUploadRootDir(), $this->file->getClientOriginalName());

        // On sauvegarde le nom de fichier
        $this->picture = $this->file->getClientOriginalName();

        // La propriété file ne servira plus
        $this->file = null;
    }
    public function __construct()
    {
        $this->idmember        = new ArrayCollection();
        $this->namemember      = new ArrayCollection();
        $this->nomevent        = new ArrayCollection();
        $this->description     = new ArrayCollection();
        $this->picture         = new ArrayCollection();
    }

    /**
     * Get idmember
     *
     * @return integer 
     */
    public function getIdmember()
    {
        return $this->idmember;
    }

    /**
     * Set namemember
     *
     * @param string $namemember
     * @return Members
     */
    public function setNamemember($namemember)
    {
        $this->namemember = $namemember;

        return $this;
    }

    /**
     * Get namemember
     *
     * @return string 
     */
    public function getNamemember()
    {
        return $this->namemember;
    }

    /**
     * Set instrument
     *
     * @param string $instrument
     * @return Members
     */
    public function setInstrument($instrument)
    {
        $this->instrument = $instrument;

        return $this;
    }

    /**
     * Get instrument
     *
     * @return string 
     */
    public function getInstrument()
    {
        return $this->instrument;
    }

    /**
     * Set description
     *
     * @param string $description
     * @return Members
     */
    public function setDescription($description)
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Get description
     *
     * @return string 
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set picture
     *
     * @param string $picture
     * @return Members
     */
    public function setPicture($picture)
    {
        $this->picture = $picture;

        return $this;
    }

    /**
     * Get picture
     *
     * @return string 
     */
    public function getPicture()
    {
        return $this->picture;
    }
}
